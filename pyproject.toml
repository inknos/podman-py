[build-system]
requires = ["setuptools>=46.4"]
build-backend = "setuptools.build_meta"

[project]
name = "podman"
dynamic = ["version"]
description = "Bindings for Podman RESTful API"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
authors = [
    { name = "Brent Baude" },
    { name = "Jhon Honce", email = "jhonce@redhat.com" },
    { name = "Urvashi Mohnani" },
    { name = "Nicola Sella", email = "nsella@redhat.com" },
]
keywords = [
    "libpod",
    "podman",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
# compatible releases
# ~= with version numbers
dependencies = [
    "requests >=2.24",
    "tomli>=1.2.3; python_version<'3.11'",
    "urllib3",
]

[project.optional-dependencies]
progress_bar = [
    "rich >= 12.5.1",
]
docs = [
    "sphinx"
]
test = [
    "coverage",
    "fixtures",
    "pytest",
    "requests-mock",
]

[project.urls]
"Bug Tracker" = "https://github.com/containers/podman-py/issues"
Homepage = "https://github.com/containers/podman-py"
"Libpod API" = "https://docs.podman.io/en/latest/_static/api.html"

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.setuptools]
packages = ["podman"]

[tool.setuptools.dynamic]
version = {attr = "podman.version.__version__"}

[tool.ruff]
line-length = 100
src = ["podman"]

# This is the section where Black is mostly replaced with Ruff
[tool.ruff.format]
exclude = [
    ".git",
    ".history",
    ".tox",
    ".venv",
    "build",
    "dist",
    "docs",
    "hack",
]
quote-style = "preserve"

[tool.ruff.lint]
select = [
    # More stuff here https://docs.astral.sh/ruff/rules/
    "F", # Pyflakes
    "E", # Pycodestyle Error
    "W", # Pycodestyle Warning
    "I", # isort
    "N", # PEP8 Naming
    # TODO "D", # pydocstyle # Lots of errors but we definitely need to improve this
    "UP", # Pyupgrade
    "YTT", # flake-8-2020
    # TODO "ANN",
    "ASYNC", # flake8-async
    "S", # Bandit
    "BLE", # flake8-blind-except
    # TODO "FBT", # flake8-boolean-trap # ~30 issues that can be fixed if the API does not break
    "B", # Bugbear
    "A", # flake-8-builtins
    # TODO "COM", # flake8-commas # many, many, autofixes
    # TODO "CPY", # flake8-copyright
    # TODO "C4",  # flake8-comprehensions # trivial fixes
    # TODO "DTZ",  # flake8-datetimez # Couple of errors here
    "T10",  # flake8-debugger
    # TODO "EM",  # flake8-errmsg # Fixes are many but should be easy
    "EXE",  # flake8-executable
    # TODO "FA",  # flake9-future-annotations # Things are breaking...
    # TODO "ISC",  # flake8-implicit-str-concat # Couple of concats, easy fix
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    # TODO "G",  # flake8-logging-format # Just one fix
    # TODO "INP",  # flake8-no-pep420 # one fix
    "PIE",  # flake8-pie
    # TODO "T20",  # flake8-print # Print should not be around
    # TODO "PYI",  # flake8-pyi # Just two easy fixes
    # TODO "PT",  # flake8-pytest-style # This is tricky and it makes ~500 errors that are not easy to fix
    # TODO "Q",  # flake8-quotes # Probably ignored or fixed as last
    # TODO "Q003",  # avoidable-escaped-quote # One simple fix
    "Q004",  # unnecessary-escaped-quote
    # TODO "RSE",  # flake8-raise # One simple fix
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    # TODO "SIM",  # flake8-simplify # Tricky, 80 reworks are to do
    # TODO "TID",  # flake8-tidy-imports # a couple of imports are flaky
    "TC",  # flake8-type-checking
    "INT",  # flake8-gettext
    # TODO "ARG",  # flake8-unused-arguments # 27 not simple errors
    # TODO "PTH",  # flake8-use-pathlib # Opinionated but reasonable open->Path.open fix
    # TODO "TD",  # flake8-todo # better todos, optional but nice to have for future sanity
    # TODO "FIX",  # flake8-fixme # For the same reason of todos, this is really nice to have for sanity
    # TODO "ERA",  # eradicate # Sometimes commented out code is about documentation
    # TODO "PGH",  # pygrep-hooks # One single error but maybe not simple
    # TODO "PL",  # Pylint # is aliasing the following
    "PLC", # Pylint Convention
    # TODO "PLR", # Pylint Refactor # ~30 ish errors
    "PLW", # Pylint Warning
    "PLE", # Pylint Error
    "PLW", # Pylint Warning
    # TODO "TRY",  # tryceratops # Exception handling, not easy fixes
    "FLY",  # flynt
    # TODO "PERF",  # perflint # few fixes
    "FURB",  # refurb
    # TODO "DOC",  # pydoclint
    # TODO "RUF",  # ruff # some opinions here and there... need to think about it
]
# Some checks should be enabled for code sanity disabled now
# to avoid changing too many lines
ignore = [
    "F821", # TODO Undefined name
    # Some Exceptions such as NotFound and NotFoundError can be ambiguous
    # This change need to be performed with carefulness
    "N818", # TODO Error Suffix in exception name
    # This can lead to API breaking changes so it's disabled for now
    "N80", # TODO Invalid Name
    # TODO this error fails on one file and it's necessary to address
    # the issue properly on a specific PR
    "S108",
    # TODO This is probably a false positive
    "S603",
]
[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["copyright", "all"]
[tool.ruff.lint.per-file-ignores]
"podman/tests/*.py" = ["S"]
